#!/bin/env ruby

# helper

class String
  def cyan
    "\e[36m#{self}\e[0m"
  end

  def pad(n)
    "%-#{n}s" % self
  end
end

# variable for pattern

file_pattern = nil
keys = []

# parse options and arguments

require 'optparse'

OptionParser.new do |opts|

  opts.on "-f pattern" do |p|
    file_pattern = Regexp.new(p)
  end

  opts.on "-F pattern" do |p|
    file_pattern = Regexp.new(p, true)
  end

  opts.on "-i re" do |r|
    keys << Regexp.new(r, true)
  end

end.parse!

keys.concat ARGV.map{|arg| Regexp.new arg}

# find files

files = Dir.glob("**/*").select!{|path| File.file? path}

files.select!{|path| File.basename(path).match file_pattern} if file_pattern

# match

rs = files.map do |path|
       line_no = 0
       match_lines = File.readlines(path).each_with_index.map do |line, line_no|
                       [line_no + 1, line]
                     end.select do |line_no, line|
                       keys.all?{|k| k =~ line}
                     end.map do |line_no, line|
                       line_no.to_s.pad(4) + ": " + line
                     end
       [(path + ' :').cyan, match_lines, nil]
     end.select do |_, match|
       not match.empty?
     end

puts rs